==================
Return statements
==================

funk x() -> int {
  return 1;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type))
    (block
      (return_statement (number)))))

==================
Expression statements
==================

funk x() {
  1 + 2;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (binary_expression (number) (number))))))

==================
Let statements
==================

funk x() -> int {
  let a = 1;
  let b: int = 2;
  let c: bool = a == b;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type))
    (block
      (let_statement
        (identifier)
        (number))
      (let_statement
        (identifier)
        (type)
        (number))
      (let_statement
        (identifier)
        (type)
        (binary_expression
          (identifier)
          (identifier))))))
