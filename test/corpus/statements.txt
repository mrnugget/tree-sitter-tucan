==================
Return statements
==================

funk x() -> int {
  return 1;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type))
    (block
      (return_statement (number)))))

==================
Expression statements
==================

funk x() {
  1 + 2;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (binary_expression (number) (number))))))

==================
Let statements
==================

funk x() -> int {
  let a = 1;
  let b: int = 2;
  let c: bool = a == b;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type))
    (block
      (let_statement
        (identifier)
        (number))
      (let_statement
        (identifier)
        (type)
        (number))
      (let_statement
        (identifier)
        (type)
        (binary_expression
          (identifier)
          (identifier))))))


==================
For loops
==================

funk x() -> int {
  for (;;) { }
  for (;;) { print_num(i); }
  for (let i = 0;;) { print_num(i); }
  for (let i = 0; i < 10; ) { print_num(i); }
  for (let i = 0; i < 10; i = i + 1) { print_num(i); }
  for (let i = 0; ; i = i + 1) { print_num(i); }
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type))
    (block

      (for_loop_statement
        (block))

      (for_loop_statement
        (block
          (expression_statement (call_expression (identifier) (argument_list (identifier))))))

      (for_loop_statement
        (let_statement (identifier) (number))
        (block
          (expression_statement (call_expression (identifier) (argument_list (identifier))))))

      (for_loop_statement
        (let_statement (identifier) (number))
        (binary_expression (identifier) (number))
        (block
          (expression_statement (call_expression (identifier) (argument_list (identifier))))))

      (for_loop_statement
        (let_statement (identifier) (number))
        (binary_expression (identifier) (number))
        (assignment_expression (identifier) (binary_expression (identifier) (number)))
        (block
          (expression_statement (call_expression (identifier) (argument_list (identifier))))))

      (for_loop_statement
        (let_statement (identifier) (number))
        (assignment_expression (identifier) (binary_expression (identifier) (number)))
        (block
          (expression_statement (call_expression (identifier) (argument_list (identifier)))))))))
