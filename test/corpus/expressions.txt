==================
Identifiers
==================

funk x() {
  a;
  camelCase;
  snake_case;
  includingANumber1;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (identifier))
      (expression_statement (identifier))
      (expression_statement (identifier))
      (expression_statement (identifier)))))

==================
Literals
==================

funk x() {
  1;
  a;
  true;
  false;
  "tucan true false 1 2 3 4 {} != < if for loop";
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (number))
      (expression_statement (identifier))
      (expression_statement (true))
      (expression_statement (false))
      (expression_statement (string))
      )))

==================
Binary expressions
==================

funk x() {
  1 + 2;
  1 - 2;
  1 > 2;
  1 < 2;
  1 => 2;
  1 <= 2;
  1 == 2;
  1 != 2;
  "a" == "a";
  "foo bar" == "bar foo";
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (number) (number)))
      (expression_statement (binary_expression (string) (string)))
      (expression_statement (binary_expression (string) (string))))))

==================
Assignment expressions
==================

funk x() {
  a = 5 + 5;
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (assignment_expression
                              (identifier) (binary_expression (number) (number)))))))

==================
Call expression without args
==================

funk x() {
  print_num();
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (call_expression (identifier) (argument_list))))))

==================
Call expression with args
==================

funk x() {
  print_num(1);
  print_num(1, 2, 3, 4);
  print_num(a, b, 3, 4 + 1, "foobar");
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (call_expression (identifier) (argument_list (number))))
      (expression_statement (call_expression (identifier) (argument_list (number) (number) (number) (number))))
      (expression_statement
        (call_expression (identifier) (argument_list
                                        (identifier)
                                        (identifier)
                                        (number)
                                        (binary_expression (number) (number))
                                        (string)))))))


==================
If conditional without else
==================

funk x() {
  if (true) {
    1;
  };
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (if_expression (true) (block (expression_statement (number))))))))

==================
If conditional with else
==================

funk x() {
  if (true) {
    1;
  } else {
    2;
  };
}

---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (expression_statement (if_expression (true) (block (expression_statement (number)))
                                                  (block (expression_statement (number))))))))
